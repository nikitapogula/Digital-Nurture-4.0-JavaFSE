CREATE OR REPLACE PACKAGE CustomerManagement IS
    PROCEDURE AddNewCustomer(
        p_customer_id IN CUSTOMERS.CUSTOMERID%TYPE,
        p_name IN CUSTOMERS.NAME%TYPE,
        p_dob IN CUSTOMERS.DOB%TYPE,
        p_balance IN CUSTOMERS.BALANCE%TYPE
    );

    PROCEDURE UpdateCustomerDetails(
        p_customer_id IN CUSTOMERS.CUSTOMERID%TYPE,
        p_name IN CUSTOMERS.NAME%TYPE,
        p_dob IN CUSTOMERS.DOB%TYPE,
        p_balance IN CUSTOMERS.BALANCE%TYPE
    );

    FUNCTION GetCustomerBalance(
        p_customer_id IN CUSTOMERS.CUSTOMERID%TYPE
    ) RETURN CUSTOMERS.BALANCE%TYPE;
END CustomerManagement;
/
CREATE OR REPLACE PACKAGE BODY CUSTOMERMANAGEMENT IS

    PROCEDURE ADDNEWCUSTOMER(
        P_CUSTOMER_ID IN CUSTOMERS.CUSTOMERID%TYPE,
        P_NAME IN CUSTOMERS.NAME%TYPE,
        P_DOB IN CUSTOMERS.DOB%TYPE,
        P_BALANCE IN CUSTOMERS.BALANCE%TYPE
    ) IS
    BEGIN
        INSERT INTO CUSTOMERS (CUSTOMERID, NAME, DOB, BALANCE, LASTMODIFIED)
        VALUES (P_CUSTOMER_ID, P_NAME, P_DOB, P_BALANCE, SYSDATE);
    END ADDNEWCUSTOMER;

    PROCEDURE UPDATECUSTOMERDETAILS(
        P_CUSTOMER_ID IN CUSTOMERS.CUSTOMERID%TYPE,
        P_NAME IN CUSTOMERS.NAME%TYPE,
        P_DOB IN CUSTOMERS.DOB%TYPE,
        P_BALANCE IN CUSTOMERS.BALANCE%TYPE
    ) IS
    BEGIN
        UPDATE CUSTOMERS
        SET NAME = P_NAME,
            DOB = P_DOB,
            BALANCE = P_BALANCE,
            LASTMODIFIED = SYSDATE
        WHERE CUSTOMERID = P_CUSTOMER_ID;
    END UPDATECUSTOMERDETAILS;

    FUNCTION GETCUSTOMERBALANCE(
        P_CUSTOMER_ID IN CUSTOMERS.CUSTOMERID%TYPE
    ) RETURN CUSTOMERS.BALANCE%TYPE IS
        V_BALANCE CUSTOMERS.BALANCE%TYPE;
    BEGIN
        SELECT BALANCE INTO V_BALANCE
        FROM CUSTOMERS
        WHERE CUSTOMERID = P_CUSTOMER_ID;
        RETURN V_BALANCE;
    END GETCUSTOMERBALANCE;

END CUSTOMERMANAGEMENT;
/